{"version":3,"sources":["styles/styles.tsx","components/login/Login.tsx","api/api.ts","app/App.tsx","theme.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","minWidth","padding","marginBottom","spacing","formClass","backgroundColor","errorMessage","height","fontSize","color","buttonAdditionalClass","marginTop","paperForLogInInformation","textAlign","Login","classes","useState","loginText","setLoginText","loading","isLoading","formik","useFormik","initialValues","email","password","validationSchema","Yup","required","matches","message","onSubmit","values","validateData","data","a","axios","get","then","response","catch","err","console","log","Paper","elevation","square","className","Grid","container","direction","justify","alignItems","item","xs","Typography","variant","component","gutterBottom","align","Container","maxWidth","handleSubmit","TextField","id","label","type","margin","fullWidth","getFieldProps","error","Boolean","touched","errors","Button","size","CircularProgress","length","App","Box","mt","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.22f53c07.chunk.js","sourcesContent":["import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'block',\n            minWidth: 200,\n            padding: '5vh 0 2vh 0',\n            marginBottom: theme.spacing(3),\n        },\n        formClass: {\n            display: 'block',\n            backgroundColor: 'white ',\n            minWidth: '90%',\n        },\n        errorMessage: {\n            display: 'inline',\n            height: 15,\n            fontSize: 10,\n            color: \"red\",\n        },\n        buttonAdditionalClass: {\n            marginTop: 50,\n        },\n        paperForLogInInformation: {\n            height: 100,\n            textAlign: 'center'\n        }\n    }),\n);\n\nexport default useStyles;\n","import React, {Fragment, useState} from 'react';\n\nimport {useFormik} from 'formik';\nimport * as Yup from 'yup';\nimport axios, {AxiosError, AxiosResponse} from 'axios';\n\nimport {Button, CircularProgress, Container, Grid, Paper, TextField, Typography} from '@material-ui/core';\nimport useStyles from '../../styles/styles';\n\nimport {FormValues, UserResponse} from '../../App.models';\nimport {URL_GET_USER} from '../../api/api';\n\nconst Login: React.FC = () => {\n    const classes = useStyles();\n    const [loginText, setLoginText] = useState<string>('');\n    const [loading, isLoading] = useState<boolean>(false)\n\n    const formik = useFormik<FormValues>({\n        initialValues: {\n            email: \"\",\n            password: \"\"\n        },\n        validationSchema: Yup.object({\n            email: Yup.string()\n                .email('Invalid email address')\n                .required('Required'),\n            password: Yup.string()\n                .matches(/(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}/,\n                    {message: \"Password must be minimum eight characters, at least one uppercase letter, one lowercase letter and one number\"})\n                .required('Required'),\n        }),\n        onSubmit: (values: FormValues) => {\n            return validateData(values)\n        },\n    });\n\n    const validateData = async (data: FormValues): Promise<any> => {\n        isLoading(true)\n        setLoginText('');\n        await axios.get(URL_GET_USER)\n            .then((response: AxiosResponse<UserResponse>) => {\n                if (data.email === response.data?.email && data.password === response.data?.password) {\n                    setLoginText(\"Logged in\")\n                } else {\n                    setLoginText(\"Wrong login data\")\n                }\n            })\n            .catch((err: AxiosError<any>) => {\n                console.log(err)\n                setLoginText(\"Api Error, try again\")\n            })\n        isLoading(false)\n    }\n\n    return (\n        <Fragment>\n            <Paper elevation={3} square={false} className={classes.root}>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n                    <Grid item xs={10}>\n                        <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\">\n                            Login\n                        </Typography>\n                    </Grid>\n                    <Container maxWidth=\"md\">\n                        <form onSubmit={formik.handleSubmit} className={classes.formClass}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    id=\"email\"\n                                    label=\"Email\"\n                                    type=\"email\"\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    {...formik.getFieldProps('email')}\n                                    error={Boolean(formik.touched.email && formik.errors.email)}\n                                />\n                                <span className={classes.errorMessage}>\n                                {formik.touched.email && formik.errors.email ? (\n                                    formik.errors.email) : ''}\n                                </span>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    id=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    {...formik.getFieldProps('password')}\n                                    error={Boolean(formik.touched.password && formik.errors.password)}\n                                />\n                                <span className={classes.errorMessage}>\n                                {formik.touched.password && formik.errors.password ? (\n                                    formik.errors.password) : null}\n                                </span>\n                            </Grid>\n                            <Grid container justify=\"center\">\n                                <Button\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    className={classes.buttonAdditionalClass}\n                                >\n                                    SUBMIT\n                                </Button>\n                            </Grid>\n                        </form>\n                    </Container>\n                </Grid>\n            </Paper>\n            <Grid item>\n                {loading && (\n                    <Paper elevation={3} square={false} className={classes.root}>\n                        <Grid container justify=\"center\">\n                            <CircularProgress color=\"primary\"/>\n                        </Grid>\n                    </Paper>\n                )}\n                {Boolean(loginText.length) && (\n                    <Paper elevation={3} square={false} className={classes.root}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h3\" component=\"h3\" gutterBottom align=\"center\">\n                                {loginText}\n                            </Typography>\n                        </Grid>\n                    </Paper>\n                )}\n            </Grid>\n        </Fragment>\n    );\n}\nexport default Login;\n","export const URL_GET_USER: string = 'https://5f5f88addf620f00163e5e11.mockapi.io/users';\n","import React from 'react';\nimport Login from '../components/login/Login';\n\nimport {Box, Container} from \"@material-ui/core\";\n\nconst App: React.FC = () => {\n    return (\n        <Container maxWidth=\"sm\">\n            <Box mt={6}>\n                <Login/>\n            </Box>\n        </Container>\n    );\n}\nexport default App\n","import red from '@material-ui/core/colors/red';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#431c53',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport App from './app/App';\nimport theme from './theme';\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline/>\n        <App/>\n    </ThemeProvider>,\n    document.querySelector('#root'),\n);\n"],"sourceRoot":""}